@page "/"
@* This is all you need to do to begin using configuration *@
@inject IConfiguration _config
@inject IOptions<EmailSettingsOptions> _emailSettingsOptions

<h1>Hello, world!</h1>

<p>
    MySetting Value: @mySetting
</p>
<p>
    MySubSetting Value: @mySubSetting
</p>

<p>
    MySubSubSetting Value: @mySubSubSetting
</p>

<p>
    Connection String Value: @connectionString
</p>

<p>
    Email Enabled: @emailSettings.EnableEmailSystem <br />
    Email Timeout: @emailSettings.EmailTimeoutInSeconds <br />
    Email Servers: 
    @foreach (string server in emailSettings.EmailServers) 
    { 
        @server @:&nbsp; 
    }
    <br />
    Email Admin: @emailSettings.EmailAdmin.FirstName @emailSettings.EmailAdmin.LastName
</p>



@code {
    string mySetting = "";
    string mySubSetting = "";
    string mySubSubSetting = "";
    string connectionString = "";
    EmailSettingsOptions emailSettings = new EmailSettingsOptions();

    protected override void OnInitialized()
    {
        // This is how you read a basic setting.
        mySetting = _config.GetValue<string>("MySetting");
        // This is how you read a subsetting.
        mySubSetting = _config.GetValue<string>("MainSetting:SubSetting");
        // You can even read sub sub sections
        mySubSubSetting = _config.GetValue<string>("MainSetting:SubSection:SubSubSetting");
        // If you do not see anything, then you properly misspelled it.
        // Reading connection strings are so commenly used, that a buildin short cut is created for it.
        connectionString = _config.GetConnectionString("Default");

        //emailSettings = _config.GetSection("EmailSettings").Get<EmailSettingsOptions>();
        // This is a better way of using options.
        emailSettings = _emailSettingsOptions.Value;
    }
}